#include <algorithm>
#include <array>
#include <thread>
#include <iostream>
#include <sstream>
#include <string_view>

#include <boost/asio.hpp>

namespace {

const std::string kIndexPageContent = R"index.html(
<html>
  <head>
    <meta charset="utf-8">
    <title>Authentication</title>
    <style>
      body {
        width: 100%;
        height: 100vh;
        min-height: 600px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .authentication_form {
        width: 400px;
        border: 3px solid black;
        padding: 15px 30px;
      }
      .inputwrapper {
        margin-bottom: 15px;
      }
      .submit {
        padding: 5px 50px;
        margin: 0 auto;
        display: block;
      }
      label {
        font-size: 16px;
        margin-bottom: 5px;
        display: block;
      }
      input {
        width: 100%;
        height: 30px;
      }
      #result {
        margin-bottom: 15px;
        text-align: center;
      }
    </style>
  </head>
  <body>
    <div class="authentication_form">
      <div id="result">
      </div>
      <div class="inputwrapper">
        <label>
          username
        </label>
        <input type="text" class="userinput" id="username"/>
      </div>
      <div class="inputwrapper">
        <label>
          password
        </label>
        <input type="password" class="userinput" id="password"/>
      </div>
      <button onclick="OnPasswordSubmit()" class="submit">
        CHECK
      </button>
    </div>
    <script>
      function AuthenticateUserWithPassword(username, password) {
        return fetch("module").then(response =>
          response.arrayBuffer()
        ).then(bytes =>
          WebAssembly.instantiate(bytes, {})
        ).then(({module, instance}) => {
          let instance_buffer = new Uint16Array(instance.exports.credentials.buffer);
          const user_credentials = username + password;
          for (let i = 0; i < user_credentials.length; ++i) {
            instance_buffer[i] = user_credentials.codePointAt(i);
          }
          return instance.exports.authenticate(user_credentials.length);
        });
      }
      function OnPasswordSubmit() {
        const username = document.getElementById("username");
        const password = document.getElementById("password");
        AuthenticateUserWithPassword(username.value, password.value)
          .then(is_authenticated => {
            let result = document.getElementById("result");
            result.innerHTML =
              is_authenticated ? "UR FLAG IS: " + username.value + password.value
                               : "WRONG";
          });
      }
    </script>
  </body>
</html>
)index.html";

const std::array<unsigned char, 1329> kBinaryPageContent = {
  0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x09, 0x02, 0x60, 0x01, 0x7F, 0x01, 
  0x7F, 0x60, 0x00, 0x00, 0x03, 0x05, 0x04, 0x00, 0x00, 0x01, 0x00, 0x05, 0x03, 0x01, 0x00, 
  0x01, 0x07, 0x1E, 0x02, 0x0B, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x61, 0x6C, 
  0x73, 0x02, 0x00, 0x0C, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6E, 0x74, 0x69, 0x63, 0x61, 0x74, 
  0x65, 0x00, 0x03, 0x0A, 0xEF, 0x09, 0x04, 0x52, 0x01, 0x01, 0x7F, 0x02, 0x7F, 0x02, 0x40, 
  0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x20, 0x00, 0x41, 0x03, 0x71, 0x0E, 0x03, 0x00, 0x01, 
  0x02, 0x03, 0x0B, 0x41, 0x90, 0xF6, 0xC0, 0xD5, 0x07, 0x0C, 0x03, 0x0B, 0x41, 0xA0, 0xDF, 
  0xA7, 0xC6, 0x7B, 0x0C, 0x02, 0x0B, 0x41, 0xEB, 0xAF, 0xAC, 0xF1, 0x07, 0x0C, 0x01, 0x0B, 
  0x41, 0xE6, 0x93, 0xA9, 0xE5, 0x7A, 0x0C, 0x00, 0x0B, 0x21, 0x01, 0x20, 0x01, 0x41, 0x03, 
  0x20, 0x00, 0x41, 0x02, 0x76, 0x6B, 0x41, 0x03, 0x74, 0x76, 0x41, 0xFF, 0x01, 0x71, 0x0B, 
  0x14, 0x00, 0x41, 0x00, 0x41, 0x01, 0x20, 0x00, 0x10, 0x00, 0x20, 0x00, 0x41, 0x01, 0x74, 
  0x2F, 0x01, 0x00, 0x46, 0x1B, 0x0B, 0xA6, 0x08, 0x01, 0x01, 0x7F, 0x41, 0x10, 0x21, 0x00, 
  0x02, 0x40, 0x03, 0x40, 0x20, 0x00, 0x41, 0x00, 0x46, 0x0D, 0x01, 0x02, 0x40, 0x02, 0x40, 
  0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x41, 0x10, 0x20, 0x00, 0x6B, 0x41, 0x02, 0x76, 0x0E, 
  0x03, 0x00, 0x01, 0x02, 0x03, 0x0B, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 
  0x40, 0x41, 0x10, 0x20, 0x00, 0x6B, 0x41, 0x03, 0x71, 0x0E, 0x03, 0x00, 0x01, 0x02, 0x03, 
  0x0B, 0x41, 0x00, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0x04, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x04, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0x04, 0x2F, 0x01, 0x00, 0x73, 
  0x3B, 0x01, 0x00, 0x41, 0x00, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0x04, 0x2F, 0x01, 0x00, 
  0x73, 0x3B, 0x01, 0x00, 0x0C, 0x03, 0x0B, 0x41, 0x04, 0x41, 0x04, 0x2F, 0x01, 0x00, 0x41, 
  0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x06, 0x41, 0x04, 0x2F, 0x01, 0x00, 
  0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x04, 0x41, 0x04, 0x2F, 0x01, 
  0x00, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x02, 0x0B, 0x41, 0x02, 
  0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 
  0x06, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 
  0x41, 0x02, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 
  0x00, 0x0C, 0x01, 0x0B, 0x41, 0x20, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0x04, 0x2F, 0x01, 
  0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x22, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0x06, 0x2F, 
  0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x00, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0xCB, 
  0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x06, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x41, 0x9B, 0x01, 
  0x73, 0x3B, 0x01, 0x00, 0x41, 0x04, 0x41, 0x04, 0x2F, 0x01, 0x00, 0x41, 0x3C, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x02, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x41, 0xFB, 0x01, 0x73, 0x3B, 0x01, 
  0x00, 0x41, 0x24, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0x02, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x26, 0x41, 0x00, 0x2F, 0x01, 0x00, 0x41, 0x06, 0x2F, 0x01, 0x00, 0x73, 
  0x3B, 0x01, 0x00, 0x0C, 0x00, 0x0B, 0x0C, 0x03, 0x0B, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 
  0x02, 0x40, 0x02, 0x40, 0x41, 0x10, 0x20, 0x00, 0x6B, 0x41, 0x03, 0x71, 0x0E, 0x03, 0x00, 
  0x01, 0x02, 0x03, 0x0B, 0x41, 0x08, 0x41, 0x08, 0x2F, 0x01, 0x00, 0x41, 0x0A, 0x2F, 0x01, 
  0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x0A, 0x41, 0x08, 0x2F, 0x01, 0x00, 0x41, 0x0A, 0x2F, 
  0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x08, 0x41, 0x08, 0x2F, 0x01, 0x00, 0x41, 0x0A, 
  0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x03, 0x0B, 0x41, 0x2A, 0x41, 0x0A, 0x2F, 
  0x01, 0x00, 0x41, 0x0C, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x0A, 0x41, 0x0A, 
  0x2F, 0x01, 0x00, 0x41, 0xFD, 0x01, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x02, 0x0B, 0x41, 0x2C, 
  0x41, 0x0A, 0x2F, 0x01, 0x00, 0x41, 0x0E, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 
  0x0C, 0x41, 0x0C, 0x2F, 0x01, 0x00, 0x41, 0xE8, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x01, 
  0x0B, 0x41, 0x08, 0x41, 0x08, 0x2F, 0x01, 0x00, 0x41, 0x81, 0x01, 0x73, 0x3B, 0x01, 0x00, 
  0x41, 0x2E, 0x41, 0x08, 0x2F, 0x01, 0x00, 0x41, 0x0E, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 
  0x00, 0x41, 0x0E, 0x41, 0x0E, 0x2F, 0x01, 0x00, 0x41, 0xEE, 0x01, 0x73, 0x3B, 0x01, 0x00, 
  0x0C, 0x00, 0x0B, 0x0C, 0x02, 0x0B, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 
  0x40, 0x41, 0x10, 0x20, 0x00, 0x6B, 0x41, 0x03, 0x71, 0x0E, 0x03, 0x00, 0x01, 0x02, 0x03, 
  0x0B, 0x41, 0x30, 0x41, 0x10, 0x2F, 0x01, 0x00, 0x41, 0x14, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x0C, 0x03, 0x0B, 0x41, 0x12, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 
  0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x16, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 0x16, 
  0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x12, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 
  0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x02, 0x0B, 0x41, 0x14, 0x41, 0x14, 
  0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x16, 0x41, 
  0x14, 0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x14, 
  0x41, 0x14, 0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 
  0x01, 0x0B, 0x41, 0x32, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 0x14, 0x2F, 0x01, 0x00, 0x73, 
  0x3B, 0x01, 0x00, 0x41, 0x10, 0x41, 0x10, 0x2F, 0x01, 0x00, 0x41, 0xF9, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x14, 0x41, 0x14, 0x2F, 0x01, 0x00, 0x41, 0xD4, 0x00, 0x73, 0x3B, 0x01, 
  0x00, 0x41, 0x34, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x16, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x41, 0xF9, 0x00, 0x73, 0x3B, 0x01, 
  0x00, 0x41, 0x36, 0x41, 0x14, 0x2F, 0x01, 0x00, 0x41, 0x16, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x12, 0x41, 0x12, 0x2F, 0x01, 0x00, 0x41, 0xAD, 0x01, 0x73, 0x3B, 0x01, 
  0x00, 0x0C, 0x00, 0x0B, 0x0C, 0x01, 0x0B, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40, 
  0x02, 0x40, 0x41, 0x10, 0x20, 0x00, 0x6B, 0x41, 0x03, 0x71, 0x0E, 0x03, 0x00, 0x01, 0x02, 
  0x03, 0x0B, 0x41, 0x18, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x1A, 0x2F, 0x01, 0x00, 0x73, 
  0x3B, 0x01, 0x00, 0x41, 0x1A, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x1A, 0x2F, 0x01, 0x00, 
  0x73, 0x3B, 0x01, 0x00, 0x41, 0x18, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x1A, 0x2F, 0x01, 
  0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x03, 0x0B, 0x41, 0x1A, 0x41, 0x1A, 0x2F, 0x01, 0x00, 
  0x41, 0x1C, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x1C, 0x41, 0x1A, 0x2F, 0x01, 
  0x00, 0x41, 0x1C, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x41, 0x1A, 0x41, 0x1A, 0x2F, 
  0x01, 0x00, 0x41, 0x1C, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x02, 0x0B, 0x41, 
  0x3A, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x1C, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 
  0x41, 0x1E, 0x41, 0x1E, 0x2F, 0x01, 0x00, 0x41, 0xD6, 0x01, 0x73, 0x3B, 0x01, 0x00, 0x41, 
  0x38, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x1A, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 0x00, 
  0x41, 0x18, 0x41, 0x18, 0x2F, 0x01, 0x00, 0x41, 0x26, 0x73, 0x3B, 0x01, 0x00, 0x0C, 0x01, 
  0x0B, 0x41, 0x1A, 0x41, 0x1A, 0x2F, 0x01, 0x00, 0x41, 0x91, 0x01, 0x73, 0x3B, 0x01, 0x00, 
  0x41, 0x3C, 0x41, 0x1C, 0x2F, 0x01, 0x00, 0x41, 0x1E, 0x2F, 0x01, 0x00, 0x73, 0x3B, 0x01, 
  0x00, 0x41, 0x3E, 0x41, 0x1A, 0x2F, 0x01, 0x00, 0x41, 0x1E, 0x2F, 0x01, 0x00, 0x73, 0x3B, 
  0x01, 0x00, 0x41, 0x1C, 0x41, 0x1C, 0x2F, 0x01, 0x00, 0x41, 0xA8, 0x01, 0x73, 0x3B, 0x01, 
  0x00, 0x0C, 0x00, 0x0B, 0x0C, 0x00, 0x0B, 0x20, 0x00, 0x41, 0x01, 0x6B, 0x21, 0x00, 0x0C, 
  0x00, 0x0B, 0x00, 0x0B, 0x0B, 0x5D, 0x01, 0x03, 0x7F, 0x41, 0x00, 0x21, 0x01, 0x41, 0x00, 
  0x21, 0x02, 0x41, 0x00, 0x21, 0x03, 0x20, 0x00, 0x41, 0x10, 0x46, 0x04, 0x40, 0x10, 0x02, 
  0x02, 0x40, 0x03, 0x40, 0x20, 0x01, 0x20, 0x00, 0x46, 0x0D, 0x01, 0x20, 0x02, 0x02, 0x7F, 
  0x02, 0x40, 0x02, 0x40, 0x20, 0x01, 0x10, 0x01, 0x0E, 0x01, 0x00, 0x01, 0x0B, 0x41, 0x01, 
  0x0C, 0x01, 0x0B, 0x41, 0x00, 0x0C, 0x00, 0x0B, 0x6A, 0x21, 0x02, 0x20, 0x01, 0x41, 0x01, 
  0x6A, 0x21, 0x01, 0x0C, 0x00, 0x0B, 0x00, 0x0B, 0x41, 0x01, 0x41, 0x00, 0x20, 0x02, 0x41, 
  0x10, 0x46, 0x1B, 0x21, 0x03, 0x0B, 0x20, 0x03, 0x0B
};

bool StartsWith(const std::string_view origin, const std::string_view search) {
  if (origin.size() < search.size())
    return false;
  return std::equal(search.begin(), search.end(), origin.begin());
}

std::string CreateIndexPageReply() {
  std::stringstream reply;
  reply << "HTTP/1.0 200 OK\r\n"
        << "Content-Length: " << kIndexPageContent.size() << "\r\n"
        << "Content-Type: text/html\r\n"
        << "\r\n"
        << kIndexPageContent;
  return reply.str();
}

std::string CreateBinaryModuleReply() {
  std::stringstream reply;
  reply << "HTTP/1.0 200 OK\r\n"
        << "Content-Length: " << kBinaryPageContent.size() << "\r\n"
        << "Content-Type: application/octet-stream\r\n"
        << "\r\n";
  std::copy(std::begin(kBinaryPageContent), std::end(kBinaryPageContent),
      std::ostream_iterator<unsigned char>(reply, ""));
  return reply.str();
}

std::string CreateErrorReplyForbidden() {
  return "HTTP/1.0 403 Forbidden\r\n\r\n";
}

template <typename CharType, size_t Size>
std::string CreateHTTPRequestReply(
    const std::array<CharType, Size>& request, std::size_t length) {
  if (StartsWith({request.data(), length}, "GET /index.html ") ||
      StartsWith({request.data(), length}, "GET / "))
    return CreateIndexPageReply();
  else if (StartsWith({request.data(), length}, "GET /module "))
    return CreateBinaryModuleReply();
  else
    return CreateErrorReplyForbidden();
}

void ProcessConnection(boost::asio::ip::tcp::socket sock) {
  boost::system::error_code error;
  for (;;) {
    std::array<char, 1024> data;
    std::size_t length = sock.read_some(boost::asio::buffer(data), error);
    if (error)
      break;
    std::string reply = CreateHTTPRequestReply(data, length);
    boost::asio::write(sock, boost::asio::buffer(reply));
  }
}

void RunHTTPServer(boost::asio::io_service& io_service, unsigned short port) {
  boost::asio::ip::tcp::acceptor acceptor(io_service,
      boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port));
  boost::system::error_code error;
  for (;;) {
    boost::asio::ip::tcp::socket sock(io_service);
    acceptor.accept(sock, error);
    if (error)
      break;
    std::thread(ProcessConnection, std::move(sock)).detach();
  }
}

} // namespace

int main() {
  boost::asio::io_service io_service;
  boost::asio::signal_set signals(io_service, SIGINT, SIGTERM);
  signals.async_wait([&io_service](boost::system::error_code, int) {
    io_service.stop();
  });
  RunHTTPServer(io_service, 8080);
}
